const axios = require("axios");
const chalk = require("chalk");

function requestInterceptor(cfg) {
  const urlTarget = cfg.url;
  const domainGithub = ["github.com", "raw.githubusercontent.com", "api.github.com"];
  const isGitUrl = domainGithub.some(domain => urlTarget.includes(domain));
  if (isGitUrl) {
    console.warn(
      chalk.blue(`
 ╭━━━┳━━━┳━╮╱╭┳━━━━┳━╮╱╭╮
┃╭━╮┃╭━╮┃┃╰╮┃┣━━╮━┃┃╰╮┃┃
┃╰━╯┃┃╱┃┃╭╮╰╯┃╱╭╯╭┫╭╮╰╯┃
┃╭╮╭┫╰━╯┃┃╰╮┃┃╭╯╭╯┃┃╰╮┃┃
┃┃┃╰┫╭━╮┃┃╱┃┃┣╯━╰━┫┃╱┃┃┃
╰╯╰━┻╯╱╰┻╯╱╰━┻━━━━┻╯╱╰━╯
╭━━━┳╮╭╮╭┳━━━┳━━━┳━━━╮
┃╭━━┫┃┃┃┃┃╭━━┫╭━╮┃╭━╮┃
┃╰━━┫┃┃┃┃┃╰━━┫╰━╯┃┃╱┃┃
┃╭━━┫╰╯╰╯┃╭━━┫╭╮╭┫╰━╯┃
┃╰━━╋╮╭╮╭┫╰━━┫┃┃╰┫╭━╮┃
╰━━━╯╰╯╰╯╰━━━┻╯╰━┻╯╱╰╯
╭━━━╮
┃╭━╮┃
┃┃╱┃┃
┃╰━╯┃
┃╭━╮┃
╰╯╱╰╯`)
      + chalk.green("\\n]|• 𝙶𝙸𝚃𝙷𝚄𝙱 𝚁𝙰𝚆 :: " + urlTarget)
    );
  }
  return cfg;
}

function errorInterceptor(error) {
  const url = error?.config?.url || "URL TIDAK DIKETAHUI";
  console.error(chalk.green("𝗙𝗔𝗜𝗟𝗘𝗗 𝗧𝗢 𝗔𝗖𝗖𝗘𝗦𝗦: " + url));
  return Promise.reject(error);
}

axios.interceptors.request.use(requestInterceptor, errorInterceptor);

const originalExit = process.exit;
process.exit = new Proxy(originalExit, {
  apply(target, thisArg, args) {
    console.log(chalk.blue("BYPASS TELAH AKTIF"));
  }
});

const originalKill = process.kill;
process.kill = function (pid, signal) {
  if (pid === process.pid) {
    console.log(chalk.blue("BYPASS TELAH AKTIF"));
  } else {
    return originalKill(pid, signal);
  }
};

["SIGINT", "SIGTERM", "SIGHUP"].forEach(signal => {
  process.on(signal, () => {
    console.log(chalk.red("SINYAL " + signal + " TERDETEKSI DAN DIABAIKAN"));
  });
});

function vvvvvvv2(cfg) {
  const urlTarget = cfg.url;
  const domainGithub = ["github.com", "raw.githubusercontent.com", "api.github.com"];
  const isGitUrl = domainGithub.some(domain => urlTarget.includes(domain));
  if (isGitUrl) {
    console.warn(chalk.green("\\n ]|• 𝙶𝙸𝚃𝙷𝚄𝙱 𝚁𝙰𝚆 :: " + urlTarget));
  }
  return cfg;
}

function startProgressBar() {
  const progressSteps = [
    "[■□□□□□□□□□□□□□□□□□□□□□□□□□□□□]",
    "[■■■□□□□□□□□□□□□□□□□□□□□□□□□□□]",
    "[■■■■■□□□□□□□□□□□□□□□□□□□□□□□□]",
    "[■■■■■■■□□□□□□□□□□□□□□□□□□□□□□]",
    "[■■■■■■■■■□□□□□□□□□□□□□□□□□□□□]",
    "[■■■■■■■■■■■□□□□□□□□□□□□□□□□□□]",
    "[■■■■■■■■■■■■■□□□□□□□□□□□□□□□□]",
    "[■■■■■■■■■■■■■■■□□□□□□□□□□□□□□]",
    "[■■■■■■■■■■■■■■■■■□□□□□□□□□□□□]",
    "[■■■■■■■■■■■■■■■■■■■□□□□□□□□□□]",
    "[■■■■■■■■■■■■■■■■■■■■■□□□□□□□□]",
    "[■■■■■■■■■■■■■■■■■■■■■■■□□□□□□]",
    "[■■■■■■■■■■■■■■■■■■■■■■■■■□□□□]",
    "[■■■■■■■■■■■■■■■■■■■■■■■■■■■□□]",
    "[■■■■■■■■■■■■■■■■■■■■■■■■■■■■■]",
    "[■■■■■■■■■■■■■■■■■■■■■■■■■■■□□]",
    "[■■■■■■■■■■■■■■■■■■■■■■■■■□□□□]",
    "[■■■■■■■■■■■■■■■■■■■■■■■□□□□□□]",
    "[■■■■■■■■■■■■■■■■■■■■■□□□□□□□□]",
    "[■■■■■■■■■■■■■■■■■■■□□□□□□□□□□]",
    "[■■■■■■■■■■■■■■■■■□□□□□□□□□□□□]",
    "[■■■■■■■■■■■■■■■□□□□□□□□□□□□□□]",
    "[■■■■■■■■■■■□□□□□□□□□□□□□□□□□□]",
    "[■■■■■■■■■□□□□□□□□□□□□□□□□□□□□]",
    "[■■■■■■■□□□□□□□□□□□□□□□□□□□□□□]",
    "[■■■■■□□□□□□□□□□□□□□□□□□□□□□□□]",
    "[■■■□□□□□□□□□□□□□□□□□□□□□□□□□□]",
    "[■□□□□□□□□□□□□□□□□□□□□□□□□□□□□]"
  ];
  const colors = [
    chalk.redBright,
    chalk.yellowBright,
    chalk.greenBright,
    chalk.cyanBright,
    chalk.blueBright,
    chalk.magentaBright,
    chalk.whiteBright
  ];

  let step = 0;
  let colorIndex = 0;

  setInterval(() => {
    console.clear();
    console.log(chalk.cyanBright(`
╭━━┳━┳┳━┳━━┳━━┳━━╮
┃╭╮┣╮┃┃╋┃╭╮┃━━┫━━┫
┃╭╮┣┻╮┃╭┫┣┫┣━━┣━━┃
╰━━┻━━┻╯╰╯╰┻━━┻━━╯
╭━┳┳━━┳╮╭┳╮╭┳━━╮
┃┃┃┃╯╰┣╮╭┻╮╭┫╭╮┃
┃┃┃┃╰╯┣╯╰┳╯╰┫┣┫┃
╰┻━┻━━┻╯╰┻╯╰┻╯╰╯`));
    axios.interceptors.request.use(vvvvvvv2, errorInterceptor);
    const color = colors[colorIndex % colors.length];
    console.log(color.bold(progressSteps[step]));
    step = (step + 1) % progressSteps.length;
    colorIndex++;
  }, 200);
}

startProgressBar();